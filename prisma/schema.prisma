// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  USER
  ADMIN
  MODERATOR
}

enum OrderStatus {
  PENDING
  DELIVERED
  CANCELLED
}

enum PaymentMethod {
    COD
    STRIPE
}

model User {
  id            String    @id
  name          String
  email         String    @unique
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  orders        Order[]
  role          Role      @default(USER)

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Product {
  id          String     @id @default(uuid())
  title       String
  descr       String
  imgSrc      String
  price       Decimal
  isFeatured  Boolean    @default(false)
  isArchived  Boolean    @default(false)
  inStock     Boolean    @default(true)
  discount    Int        @default(0)
  stock       Int?
  isNew       Boolean    @default(false)      

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  catSlug     String
  category    Category   @relation(fields: [catSlug], references: [slug], onDelete: Cascade)

  orderItems  OrderItem[]
  images      ProductImages[]
  sizes       ProductSize[] 
}

model Category {
  id        String    @id @default(uuid())
  title     String
  descr     String
  imgSrc    String
  slug      String    @unique

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  products  Product[]
}

model Size {
  id        String         @id @default(uuid())
  title     String
  value     String

  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  products  ProductSize[]
}

model ProductSize {
  id         String   @id @default(uuid())
  productId  String
  sizeId     String
  price      Decimal
  stock      Int?

  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  size       Size     @relation(fields: [sizeId], references: [id], onDelete: Cascade)

  @@unique([productId, sizeId]) // Prevent duplicate size for same product
}

model ProductImages {
  id         String    @id @default(uuid())
  productId  String
  product    Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  url        String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@map("product_image")
}

model Order {
  id              String   @id @default(uuid())
  userId          String?
  user            User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderItems      OrderItem[]
  isPaid          Boolean     @default(false)
  customerName    String
  email           String
  phone           String
  address         String
  city            String
  country         String
  postalCode      String
  totalPrice      Decimal
  paymentMethod   String
  paymentIntentId String?
  status          OrderStatus @default(PENDING)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  count     Int      @default(0)
  price     Decimal
}